library(devtools)
library(roxygen2)
document()
library(devtools)
library(roxygen2)
document()
document()
library(devtools)
library(roxygen2)
document()
document()
document()
setwd("..")
install.packages("RegressionLibs")
install.packages("RegressionLibs")
library(RegressionLibs)
library(RegressionLibs)
setwd("./RegressionLibs")
document()
library(devtools)
library(roxygen2)
document()
document()
library(devtools)
library(roxygen2)
document()
document()
document()
document()
removeRowsByRowName <- function (remove, dataSet) {
if (missing(remove)) {
stop("Need to specify remove!")
}
if (missing(dataSet)) {
stop("Need to specify dataSet!")
}
#All parameters are OK!
names <- row.names(dataSet)
sort(remove)
j <- 1
i <- 1
while (i<=length(names) && j<=length(remove)) {
if (as.integer(names[i])==as.integer(remove[j])) { #Remove row
dataSet <- dataSet[-i,] #Remove row
j <- j + 1
}
else {
if (as.integer(names[i]) > as.integer(remove[j])) {
j <- j + 1
}
i <- i + 1
}
}
return (dataSet)
}
document()
document()
install.packages("devtools")
devtools::install_github("mariytu/RegressionLibs")
library('devtools')
library(devtools)
library("arules", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.1")
install.packages("arules")
install.packages("arules")
library(RegressionLibs)
library(plotly)
Sys.setenv("plotly_username" = "mari.ytu")
Sys.setenv("plotly_api_key" = "krr932zpcq")
iris.x <- iris[,1:4]
data.pca <- prcomp(iris.x, center = TRUE, scale. = TRUE)
p <- linePlot(data.pca)
ggplotly(p)
data(USArrests)
summary(data)
summary('data')
summary(x)
x<-data(USArrests)
summary(x)
x<-USArrests
summary(x)
head(x)
plot(x)
row.names(x)
row.name(x)
x("Alabama")
View(USArrests)
setwd("~/Dropbox/Research/Alejandro Cataldo/src")
OriginalCSV <- read.csv(file="IT-cluster.csv", header=T, sep=",", row.names=NULL)
OriginalCSV <- read.csv(file="IT-cluster.csv", header=T, sep=",", row.names=NULL)
View(OriginalCSV)
View(OriginalCSV)
colnames(OriginalCSV)
try(na.fail(OriginalCSV))   #> Error: missing values in ...
OriginalCSV<-na.omit(OriginalCSV)
try(na.fail(OriginalCSV))   #> Error: missing values in ...
data<-OriginalCSV[,5:23]
View(data)
View(data)
View(OriginalCSV)
View(OriginalCSV)
plot(data[,1:5])
pc <- princomp(data)
plot(pc)
plot(pc, type='l')
summary(pc)
mar <- par()$mar
par(mar=mar+c(0,5,0,0))
barplot(sapply(data, var), horiz=T, las=1, cex.names=0.8)
barplot(sapply(data, var), horiz=T, las=1, cex.names=0.8, log='x')
par(mar=mar)
pc <- prcomp(data)
# First for principal components
comp <- data.frame(pc$x[,1:8])
plot(comp, pch=16, col=rgb(0,0,0,0.5))
wss <- (nrow(data)-1)*sum(apply(data,2,var))
for (i in 2:15) wss[i] <- sum(kmeans(data, centers=i, nstart=100, iter.max=1000)$withinss)
plot(1:15, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
# From scree plot elbow occurs at k = 4
# Apply k-means with k=4
k <- kmeans(comp, 4, nstart=25, iter.max=1000)
library(RColorBrewer)
library(scales)
palette(alpha(brewer.pal(9,'Set1'), 0.5))
plot(comp[,1:4], col=k$clust, pch=16)
plot(1:15, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
plot(comp[,1:4], col=k$clust, pch=16)
library(rgl)
install.packages("rgl")
plot3d(comp$PC1, comp$PC2, comp$PC3, col=k$clust)
library(rgl)
plot3d(comp$PC1, comp$PC2, comp$PC3, col=k$clust)
sort(table(k$clust))
clust <- names(sort(table(k$clust)))
clust
tail(x)
x
tail(OriginalCSV)
table(k$clust,OriginalCSV$Size)
table(k$clust,OriginalCSV$Activity)
table(k$clust,OriginalCSV$Region)
row.names(data[k$clust==clust[1],])
row.names(data[k$clust==clust[2],])
boxplot(OriginalCSV$Size ~ k$cluster,
xlab='Cluster', ylab='Activity',
main='Plane Accommodation by Cluster')
data[k$clust==clust[3],3:6]
data[k$clust==clust[4],3:6]
nrow(data)
ncol(data)
boxplot(OriginalCSV$Size ~ k$cluster,
xlab='Cluster', ylab='Activity',
main='Plane Accommodation by Cluster')
# Compare presence of some variables in largest clusters
data[k$clust==clust[3],3:6]
boxplot(OriginalCSV$Size ~ k$cluster,
xlab='Cluster', ylab='Activity',
main='Plane Accommodation by Cluster')
ata(ruspini)
data(ruspini)
require('cluster')
data(ruspini)
pr4 <- pam(ruspini, 4)
str(si <- silhouette(pr4))
(ssi <- summary(si))
plot(si) # silhouette plot
plot(si, col = c("red", "green", "blue", "purple"))# with cluster-wise coloring
data(iris)
pr <- kmeans(ruspini, 3)
str(si <- silhouette(pr4))
str(si <- silhouette(pr))
pr <- kmeans(iris, 3)
pr <- kmeans(iris, 3,nstart=20)
data(iris)
pr <- kmeans(iris, 3,nstart=20)
pr <- kmeans(iris[,1:4], 3,nstart=20)
str(si <- silhouette(pr))
pr
str(si <- silhouette(pr))
(ssi <- summary(si))
plot(si) # silhouette plot
plot(si, col = c("red", "green", "blue", "purple"))# with cluster-wise coloring
data(iris)
pr <- kmeans(iris[,1:4], 3,nstart=20)
pr
str(si <- silhouette(pr))
(ssi <- summary(si))
data(iris)
pr3 <- pam(iris, 3)
str(si <- silhouette(pr3))
(ssi <- summary(si))
plot(si) # silhouette plot
plot(si, col = c("red", "green", "blue"))# with cluster-wise coloring
pr3 <- kmeans(iris, 3)
pr3 <- kmeans(iris, 3,nstarts=20)
pr3 <- kmeans(iris, 3,nstart=20)
iris
iris[,-5]
pr3 <- kmeans(iris[,-5], 3,nstart=20)
pr3
str(si <- silhouette(pr3))
pr3 <- kmeans(iris[100,-5], 3,nstart=20)
pr3 <- kmeans(iris[1:100,-5], 3,nstart=20)
pr3
str(si <- silhouette(pr3))
pr3 <- kmeans(iris[50:150,-5], 3,nstart=20)
pr3
str(si <- silhouette(pr3))
pr3 <- kmeans(iris[1:10,-5], 3,nstart=20)
pr3
str(si <- silhouette(pr3))
pr3 <- kmeans(iris[11:20,-5], 3,nstart=20)
pr3
str(si <- silhouette(pr3))
class(iris)
class(ruspini)
ruspini
library(cluster)
data(xclara)
plot(xclara) # 3000 observations; a bit large for dissimilarity plotting
km <- kmeans(xclara,3)
## Now the silhouette concept builds on dissimilarities
## e.g.
dissE <- daisy(xclara) #-> large (!)  3000 x 3000 / 2
sk <- silhouette(km$cl, dissE)
plot(sk)
## but kmeans is rather equivalent to work with  {D_ij}^2,
## hence this better corresponds:
dE2 <- dissE^2
sk2 <- silhouette(km$cl, dE2)
plot(sk2)
plot(sk2,col = c("red", "green", "blue"))
data(iris)
x<-iris[11:20,-5]
pr3 <- kmeans(x, 3)
dissE <- daisy(x) #-> large (!)  3000 x 3000 / 2
x<-iris[,-5]
pr3 <- kmeans(x, 3)
dissE <- daisy(x) #-> large (!)  3000 x 3000 / 2
c <- kmeans(x, 3)
dissE <- daisy(x) #-> large (!)  3000 x 3000 / 2
sk <- silhouette(c, dissE)
sk <- silhouette(c$c1, dissE)
xclara
head(xclara)
x<-iris[2:3,-5]
c <- kmeans(x, 3)
dissE <- daisy(x) #-> large (!)  3000 x 3000 / 2
sk <- silhouette(c$c1, dissE)
sk <- silhouette(c, dissE)
km$c1
km$cl
sk <- silhouette(c$cl, dissE)
data(iris)
x<-iris[2:3,-5]
c <- kmeans(x, 3)
dissE <- daisy(x) #-> large (!)  3000 x 3000 / 2
sk <- silhouette(c$cl, dissE)
library(cluster)
library(HSAUR)
data(pottery)
km    <- kmeans(pottery,3)
dissE <- daisy(pottery)
dE2   <- dissE^2
sk2   <- silhouette(km$cl, dE2)
plot(sk2)
library(cluster)
x<-iris[2:3,-5]
km    <- kmeans(x,3)
x<-iris[,2:3]
km    <- kmeans(x,3)
dissE <- daisy(X)
dissE <- daisy(x)
dE2   <- dissE^2
sk2   <- silhouette(km$cl, dE2)
plot(sk2)
plot(sk2, col = c("red", "green", "blue"))
plotcluster(x, km$cluster)
library(fpc)
install.packages("fpc")
library(fpc)
plot(sk2, col = c("red", "green", "blue"))
plotcluster(x, km$cluster)
clusplot(x, km$cluster, color=TRUE, shade=TRUE,
labels=2, lines=0)
plotcluster(iris[,2:3], km$cluster)
plotcluster(iris[,-5], km$cluster)
clusplot(iris[,-5], km$cluster, color=TRUE, shade=TRUE,
labels=2, lines=0)
km    <- kmeans(x,3)
dissE <- daisy(x)
dE2   <- dissE^2
sk2   <- silhouette(km$cl, dE2)
plot(sk2, col = c("red", "green", "blue"))
plotcluster(iris[,-5], km$cluster)
clusplot(iris[,-5], km$cluster, color=TRUE, shade=TRUE,
labels=2, lines=0)
x<-iris[,2:4]
km    <- kmeans(x,3)
dissE <- daisy(x)
dE2   <- dissE^2
sk2   <- silhouette(km$cl, dE2)
plot(sk2, col = c("red", "green", "blue"))
x<-iris[,-5]
km    <- kmeans(x,3)
dissE <- daisy(x)
dE2   <- dissE^2
sk2   <- silhouette(km$cl, dE2)
plot(sk2, col = c("red", "green", "blue"))
plotcluster(iris[,-5], km$cluster)
clusplot(iris[,-5], km$cluster, color=TRUE, shade=TRUE,
labels=2, lines=0)
x<-iris[,-5]
km    <- kmeans(x,3)
dissE <- daisy(x)
dE2   <- dissE^2
sk2   <- silhouette(km$cl, dE2)
plot(sk2, col = c("red", "green", "blue"))
x<-iris[,-5]
km    <- kmeans(x,3)
dissE <- daisy(x)
dE2   <- dissE^2
sk2   <- silhouette(km$cl, dE2)
plot(sk2, col = c("red", "green", "blue"))
plotcluster(x, km$cluster)
clusplot(x, km$cluster, color=TRUE, shade=TRUE,
labels=2, lines=0)
plot(sk2, col = c("red", "green", "blue"))
setwd(..)
setwd("..")
installed.packages("RegressionLibs")
install.packages("RegressionLibs")
install("RegressionLibs")
ggplot(sk2)
library(ggplot2)
ggplot(sk2)
sk2
plot(c)
plot(x)
weights <- read.csv("~/NetBeansProjects/BinaryTreeSOM/data/weights.csv", header=FALSE)
View(weights)
plot(weights[,1:4])
plot(iris)
plot(weights[,1:4],iris)
plot(weights[,1:4])
plot(iris)
plot(weights)
plot(weights[,1:5])
ggplot(weights[,1:5])
library("ggplot2")
ggplot(weights[,1:5])
install.packages('rJava')
install.packages('rJava')
library("rJava")
install.packages('devTools')
install.packages('devtools')
install.packages('devtools')
install.packages('devtools')
install.packages('devtools')
stock <- "MSFT"
start.date <- "2006-01-12"
end.date <- Sys.Date()
quote <- paste("http://ichart.finance.yahoo.com/table.csv?s=",
stock,
"&a=", substr(start.date,6,7),
"&b=", substr(start.date, 9, 10),
"&c=", substr(start.date, 1,4),
"&d=", substr(end.date,6,7),
"&e=", substr(end.date, 9, 10),
"&f=", substr(end.date, 1,4),
"&g=d&ignore=.csv", sep="")
stock.data <- read.csv(quote, as.is=TRUE)
calendarHeat(stock.data$Date, stock.data$Adj.Close, varname="MSFT Adjusted Close")
source.url("http://blog.revolution-computing.com/downloads/calendarHeat.R"")
source.url("http://blog.revolution-computing.com/downloads/calendarHeat.R")
source.url("http://blog.revolution-computing.com/downloads/calendarHeat.R")
source("http://blog.revolution-computing.com/downloads/calendarHeat.R")
install.packages("makeR")
install.packages(c("devtools","RJSONIO", "knitr", "shiny", "httpuv"))
library(devtools)
document()
document()
load("C:/Users/Mary Iturriaga/Desktop/autos.Rda")
save(autos,file = "autos.Rda")
load("D:/Dropbox/Marianela Iturriaga/src/RegressionLibs/.RData")
setwd("data")
save(autos,file = "autos.Rda")
setwd("..")
library(roxygen2)
library(devtools)
document()
setwd(data)
setwd("data")
load("autos.Rda")
save(autos,file = "autos.RData")
load("autos.RData")
View(autos)
setwd("..")
document()
setwd(data)
setwd("data")
save(autos,file = "autos.Rda")
setwd("..")
document()
document()
document()
document()
document
document()
document()
document()
document()
document()
document()
document()
document()
document()
class(4)
document()
document()
document()
document()
document()
document()
document()
document()
document()
document()
library(devtools)
library(roxygen2)
document()
library(devtools)
library(roxygen2)
document()
class(1:3)
class(c(1:3))
